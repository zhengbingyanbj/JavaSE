
线程调度　:
假如我们的计算机只有一个 CPU，那么 CPU 在某一个时刻只能执行一条指令，线程只有得到 CPU时间片，也就是使用权，才可以执行指令。

那么Java是如何对线程进行调用的呢？

线程有两种调度模型：
		1)分时调度模型 所有线程轮流使用 CPU 的使用权，平均分配每个线程占用 CPU 的时间片
		2)抢占式调度模型 优先让优先级高的线程使用 CPU，如果线程的优先级相同，那么会随机选择一个，优先级高的线程获取的 CPU 时间片相对多一些。

Java使用的是抢占式调度模型。

既然线程设有设置优先级,那么肯定有默认优先级。
那么，默认优先级是多少呢? 如何获取线程对象的优先级?
　　public final int getPriority():返回线程对象的优先级
如何设置线程对象的优先级呢?
　　public final void setPriority(int newPriority)：更改线程的优先级。 

注意：
　　线程默认优先级是5。
　　线程优先级的范围是：1-10。
　　线程优先级高仅仅表示线程获取的 CPU时间片的几率高，但是要在次数比较多，或者多次运行的时候才能看到比较好的效果。

IllegalArgumentException:非法参数异常。
　　抛出的异常表明向方法传递了一个不合法或不正确的参数。就是设置的优先级超出了线程优先级的范围。

获取线程的优先级，查看系统默认的线程优先级，以及设置线程优先级：
public static void main(String[] args) {

        // 创建两个线程对象
        MyThread mt1 = new MyThread();
        MyThread mt2 = new MyThread();
        MyThread mt3 = new MyThread();
        
        //调用方法设置线程名称
        mt1.setName("哈士奇");
        mt2.setName("萨摩耶");
        mt3.setName("短尾猫");
        
        //获取默认优先级   结果都是5，证明系统默认的线程优先级是5
        System.out.println(mt1.getPriority());
        System.out.println(mt2.getPriority());
        System.out.println(mt3.getPriority());
        
        //设置线程优先级  
        //数字越大的优先级越高。但是，优先级高只是意味着该线程获取的 CPU 时间片相对多一些。并不是说是先让你走完。
        mt1.setPriority(1);
        mt2.setPriority(6);
        mt3.setPriority(10);
        
        
        mt1.start();
        mt2.start();
        mt3.start();
        
    }