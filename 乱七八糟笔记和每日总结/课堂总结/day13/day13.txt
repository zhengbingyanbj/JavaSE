进程的概念：
	1、操作系统中正在运行的程序称为进程
	2、一个操作系统可以运行多个进程
	3、在单核情况下，CPU只能运行一个程序。
	4、每打开一个进程，就会为其开辟一块空间。
进程的调度：
	在同一时刻，CPU一次只能执行一个进程，每个进程分配一段执行时间（按照时间片，或者优先级）

线程的概念：
	1、一个进程可以创建多个线程
	2、多个线程共享进程的资源
	3、一个进程之至少需要一个线程，这个线程被称为主线程（main线程）。
	4、进程和线程共同来竞争CPU，不考虑优先级的情况下，他们得到CPU的机会均等。
	5、优势：可以大量节省内存空间
	6、线程的特点：并发执行。	
	7、Java开发中不需要开发人员来创建进程，我们只需要创建线程。
线程的创建方式：Java虚拟机允许多个线程同时执行。
	方式1：	一个类继承Thread类
			1）重写run方法（run方法不是抽象方法）
			2）创建自定义对象
			3）通过自定义对象调用start()方法，启动线程。
			4）run()方法中是要执行的内容。
			5）getName();可以获取线程的名字，每一个线程，有一个特有的名字。
			6) setName();为线程起名字
			7) 使用构造方法：为线程起名。
			
	继承Thread类的缺点：继承Thread类之后就无法继承其他的类，有局限性

	方式2：实现Runable 接口()
		1）定义一个类MyRunable 实现Runable接口，
		2)重写接口中的run方法
		3）创建自定义对象
		4）创建Thread类对象，将实现类，作为Thread类的构造方法的参数传入
		5）使用Thread类对象，调用Thread类，执行start();



线程在内存中的运行：
	1、每一个线程对应一个栈，主线程中，main方法压栈，子线程是run方法压栈。
	2、线程结束之后，栈就会消失。
	3、当启动多个线程时，CPU先执行哪一个线程是不确定的

线程的sleep()方法：
	调用sleep()方法，线程就会休眠，休眠时间根据传入的参数确定。参数为：long类型的毫秒值

线程安全问题：多线程售票
	1）100 张票，三个窗口同时卖票。
	2）问题1：最后打印的票数不是1.
	3）在真正的工程中，是有网络延时存在的，为了模拟延时现象，使用Thread类的sleep()方法，模拟延时。
	4) 问题2：最后打印出 -1。解决方式：在同一时刻，只允许一个线程执行这段代码。
			对这个方法加锁：一个线程进入后方法就拿到这把锁，其他线程不能进入。
加锁方式：	
	1、同步代码块
		任何对象都可以作为一把锁
		synchronized(锁对象){
			//同一时刻，只允许一个线程进入（互斥：在同一时刻只有一个）
				
		}
	2、同步方法
		  在run();方法中调用同步方法。
		  同步方法比同步代码块更加的简洁，不需要创建对象来作为锁。
		  public synchronized void method{	//因为这个方法中都需要同步，所以将这个方法同步
		  			//在返回值之前，添加synchronized关键字，这个方法就叫同步方法。
		  }	
	   	  同步方法中的对象锁，是什么？
	   		同步方法的锁对象，就是本类对象，就是this
	3、静态方法，也有同步锁：
		  1）静态方法优先于对象存在,所以不能够使用this
		  2）静态方法的锁是，类的class文件对象。

Lock接口：
	JDK1.5的接口lock接口替换了synchronized关键字
		lock();获取锁
		unlock();释放锁
	使用实现类ReentrantLock，创建该类实例

各种同步锁的应用场景：
	例如：有三行代码：
				xxxxxxxxx
				yyyyyyyyy
				zzzzzzzzz
	场景1：如果有一百个线程想要运行这几段代码，想要同步，使用lock更加适合，代替同步代码块，
		   比较清晰，而且不用创建对象作为锁。
		   		lock();
		   		xxxxxxxxx
				yyyyyyyyy
				zzzzzzzzz
				unlock();

	场景2：如果都需要同步，那么将其抽取到一个方法中，对该方法添加synchronize关键字
			public synchronize void method(){
				xxxxxxxxx
				yyyyyyyyy
				zzzzzzzzz
			}
	场景2：只有最后一行代码需要加锁，就使用lock接口的形式
			public  void method(){
				xxxxxxxxx
				yyyyyyyyy
				lock();
				zzzzzzzzz
				unlock();
			}
匿名对象创建线程：
	简化代码，直接在Thread构造方法中，创建Runable子类匿名对象。

线程的声明周期：
	创建线程(启动线程) ---> 就绪(等待CPU调用，会有多个线程处于就绪状态，是一个队列)
	--->    运行态(抢到CPU执行权，开始执行)    --->
	阻塞状态(当CPU执行一个线程时，这个线程又在等待获取某一个资源时，这个线程就阻塞了，
	这个线程就要让出CPU的执行权,当调用sleep()方法时也会进入阻塞状态，这个时候休眠线程就要让出CPU执行权，
	当休眠结束之后，该线程就会回归到就绪状态，再次等待CPU的调用)   
	---> 线程中的代码都执行完毕，线程就会死亡。
	注意：一个线程不能直接执行，需要先进入到就绪状态。

死锁：多个线程，为了获取对方的资源，程序如果没有外力的推动，程序将永远无法执行。
	1、当使用代码块进行嵌套的时候，很容易出现死锁情况。避免嵌套同步代码块的嵌套。
	2、出现死锁，就需要修改代码。
使用程序写一个死锁。




