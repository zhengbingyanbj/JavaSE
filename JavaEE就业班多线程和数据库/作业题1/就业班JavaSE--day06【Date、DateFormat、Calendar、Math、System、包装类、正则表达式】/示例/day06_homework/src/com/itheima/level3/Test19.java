package com.itheima.level3;

/*
请使用代码实现
	分别使用String的+= 和StringBuilder的append方法对字符串做100000次拼接,
	计算String拼接100000次花费时间与StringBuilder拼接100000次所花费时间并打印
1.在包com.itheima.level3中,创建类Test19类,在Test19类中
2.提供main方法,在main方法中
	a) 使用System的currentTimeMillis()方法获取当前操作系统的毫秒值,作用程序执行的开始时间,使用start变量接收
	b)需要测试执行性能的代码
	c)使用System的currentTimeMillis()方法获取当前操作系统的毫秒值,作用程序执行的结束时间,使用end变量接收
	d)计算代码执行花费的时间 end - start,输出代码执行消耗的时间
3.写一个静态方法: testString(),在该方法中
	a)定义一个字符串 str,内容随意
	b)写一个循环100000次for循环,在循环中写上
		i.str +=”随机内容” ; 这里不要写str += (str+”xxx”) 这样会导致堆内存溢出错误.
	c)在mian方法中,需要测试性能的代码处,调用本方法
	d)运行程序,记录执行的时间
	e)注释掉这个调用
4.写一个静态方法:testStringBuilder(),在方法中
	a)创建一个StringBuilder对象sb,初始内容与testString()中的字符串相同
	b)写一个循环100000次for循环,在循环中写上
		i.调用sb.append()方法,传入的内容与testString()方法中+=后面的内容一样
	c)循环结束调用sb.toString()方法转换为字符串
	d)在mian方法中,需要测试性能的代码处,调用本方法
	e)运行程序,记录执行的时间
 */
public class Test19 {
	public static void main(String[] args) {
//		a) 使用System的currentTimeMillis()方法获取当前操作系统的毫秒值,作用程序执行的开始时间,使用start变量接收
		long start = System.currentTimeMillis(); 
//		b)需要测试执行性能的代码
		//testString(); //消耗时间: 29295毫秒
		testStringBuilder();//消耗时间:6毫秒
//		c)使用System的currentTimeMillis()方法获取当前操作系统的毫秒值,作用程序执行的结束时间,使用end变量接收
		long end = System.currentTimeMillis();
//		d)计算代码执行花费的时间 end - start,输出代码执行消耗的时间
		System.out.println("所花费的时间为:"+(end-start));
	}
	
//	3.写一个静态方法: testString(),在该方法中
	public static void  testString(){
//	a)定义一个字符串 str,内容随意
		String str = "hello";
//	b)写一个循环100000次for循环,在循环中写上
		for(int i = 0; i<100000;i++){
//		i.str +=”随机内容” ; 这里不要写str += (str+”xxx”) 这样会导致堆内存溢出错误.
			str += "world";
		}
	}
// 4. 写一个静态方法:testStringBuilder(),在方法中
	public static void testStringBuilder(){
//		a)创建一个StringBuilder对象sb,初始内容与testString()中的字符串相同
		StringBuilder sb = new StringBuilder("hello");
//		b)写一个循环100000次for循环,在循环中写上
		for(int i = 0; i<100000;i++){
//			i.调用sb.append()方法,传入的内容与testString()方法中+=后面的内容一样
			sb.append("world");
		}
//		c)循环结束调用sb.toString()方法转换为字符串
		String newStr = sb.toString();
	}
}
