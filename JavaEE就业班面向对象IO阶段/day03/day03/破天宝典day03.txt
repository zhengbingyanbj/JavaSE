 

 接口 功能的集合  里面都抽象方法 

	定义:
	   interface 接口名{}

	类实现接口
	   class 类  implements 接口名{}

	
	接口的特点  
	    1:里面都是抽象方法  public abstract
	    2:没有普通成员变量  public static final  修饰的就是常量
	    3:没有构造 不能创建对象
	    4:一个类实现了一个接口 必须重写所有的方法  否则该类是抽象类

	 类和类     继承  只能单继承
	 类和接口   实现  可以多实现
	 接口和接口 继承  可以多继承 

	 可以在继承一个类基础上 实现多个接口 


	 接口     是 方法的声明 
	 实现类   是 方法具体的实现

	 这种操作  优化程序设计  解耦 (了解)

	 抽象类  共性的 事物的体现
	 接口    扩展性  


多态 : 
         多态前提
	   1:要有实现或继承
	   2:最好有方法重写
	   3:父类引用指向子类对象 

         多态使用
	   Animal  a = new Cat();

	   a表象是父类  但是一调用功能 先去子类中找 

	 多态访问的特点 
	    编译期 全部看左边  语法格式 
	    运行期  只有成员方法看右边  

	 多态的好处 
	      参数体现  
	         feedAnimal(Animal a)  
		           传递的是子类的对象
	         Animal getAnimal()
		           返回的该类的子类对象

	       提高代码复用性  
	 多态的弊端 
	      无法使用子类特用功能

 
	      向上转型  子类提升父类类型    Animal  a = new Cat();
	      向下转型  父类还原成原有的子类类型
                关键字   对象 instanceof 类名

	      记住 李刚装爹 

1：
  A 关于接口
    假如一个 "类" 里 都是抽象的方法  
      那么 这个"类" 是不是 只是定义方法声明的 "类"

      java中有一种概念 来表示 这种东西   叫接口   

      接口是功能的集合   方法的声明

     既然 这里都是功能集合  那么也不能创建对象 

  B 类实现接口
     需要  具体的类 去  实现 这个接口的功能  

     
     类 实现接口   
        实际上是实现接口中功能  

	接口是              用来声明方法 
	实现类是            用来具体的实现方法的



	猫  和  狗  


       猫 
         叫
	 吃
                  -------------提取出一个 抽象类   
       狗
         叫
	 吃


         接口  扩展性的   
	     算数  跳高

2：多态
    A：多态的应用
        从参数上去说    调用方法 参数要什么类型 给什么类型

	具体的类 作为参数列表中的参数   传递的是 该类型对象(该类型子类对象)
	public void show(Student stu){} 

	抽象的类  作为参数   传递的是  该类型的子类对象
	public void feedAnimal(Animal a){
                a.eat();	
	}
	接口  作为参数  传递的是什么  该接口的实现类对象 

	public void useUSB(USB usb){
	}
    
    B：从 返回值去说       要求返回的是什么类型 那么就 return什么类型
        
	  具体的类 作为返回值类型   返回的是 该类型的对象 或者该类型子类对象
	    public Student getMaxMoney(){
	       
	       return new Stuent();
	    }
          抽象的类 作为返回值类型   返回的是 该类型的子类对象

	  public Animal getAnimal(..){
	     
	     return new Dog()/Cat();
	  }

	   接口 作为返回值类型   返回的是 该接口的实现类对象
	   public USB getUSB(){
	     return  new Keyboard();
	   }


 

	

