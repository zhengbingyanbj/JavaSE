  

  抽象类  
    可以有抽象方法  只有方法的声明 没有方法的实现

    也可以有非抽象方法   既有方法的声明 也有方法的实现 

    肯定是作为父类出现的   体现的是 共性的功能  

    如果多个类  他们的方法 声明一样  方法的实现也一样   抽取的方法 非抽象

    如果多个类  他们的方法 声明一样  方法的实现都不一样  抽取 抽象  也就是只抽取方法的声明 


    有没有比抽象类 更加抽象的 一种 基本单位 

      这种单位中 只允许有 方法的声明 既抽象的方法  

      这种基本单位 称为接口  跟类 是同一级别 

      技能  接口
        Q  W  E  R  

	英雄 类 

     接口是 功能的集合  

     也是一种数据类型 

     接口只描述所应该具备的方法，并没有具体实现

     具体的实现由接口的实现类(相当于接口的子类)来完成

     这种操作 将 方法的声明 与 方法的实现 进行分离  优化了程序设计  解耦 降低耦合性

     只有 类去 实现 接口 

     其他类(实现类)实现接口后，就相当于声明：”我应该具备这个接口中的功能”。
     
     实现类仍然需要重写方法以实现具体的功能

     实现的 格式 

     class 类 implements 接口名{}

     一些关系  
        类和类  
	    继承关系 
	        只能单继承 不能多继承 可以多层继承

        类和接口
	    实现关系
	       可以单实现  也可以多实现

         猫 狗  动物  








