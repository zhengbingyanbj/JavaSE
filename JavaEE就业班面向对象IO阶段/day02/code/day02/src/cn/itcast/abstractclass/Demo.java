package cn.itcast.abstractclass;
/*
 * 
 *   猫 狗 动物  类       动物都会 吃 叫 
 *   
 *   创建Animal类     
 *      两个  吃  叫 
 *      
 *   创建猫类 
 *   
 *   创建狗类
 *   
 *   Animal中定义 吃的功能和 叫的功能 是没问题的 
 *     
 *     总觉得多点啥   
 *   猫 狗 都继承动物是没问题的
 *   
 *     猫和狗  都有 各自的吃的方式 与 叫的声音
 *     
 *     那么在Animal实现的 吃的功能和叫的功能 没有作用了
 *     
 *     我们的想法    Animal中 只存在 方法的定义 不给方法的实现 
 *       是不是挺好的  支持
 *       删掉方法体中内容
 *       我们说的不是空实现  根本不给实现 只给方法的声明（定义）
 *       
 *     我们以前写的方法 给出了方法实现 称为 具体方法 
 *     那么现在 这种不给具体实现的方法 就是 抽象方法
 *     
 *       抽象有有特定的格式   
 *       抽象的关键字 abstract 
 *       
 *       抽象方法固定格式  
 *       public abstract 返回值类型 方法名(..);
 *   
 *   重要结论  
 *      如果一个类中存在了抽象方法  那么这个类必须是抽象类  
 *      
 *      什么样的类是抽象类 
 *        加abstract修饰 
 *        
 *        类上修饰  修饰类的格式 
 *        abstract class 类名{}
 */
public class Demo {
   public static void main(String[] args) {
	  
	   //创建猫
	   Cat c = new Cat();
	   
	   c.eat();
   }
}
